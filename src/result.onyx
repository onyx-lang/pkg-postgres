package postgres

use runtime
use core
use core { alloc, conv, slice }

Result :: struct {
    handle: PGresult;
    async := false;
    valid := false;

    // The strings in this array are allocated in the temporary allocator.
    // The array itself is stored in the heap.
    col_names: [] str;
    col_nums:  [] i32;
    rows: u32;
}

#inject
Result.make :: (handle: PGresult, async := false) -> Result {
    res := Result.{handle, async=async};

    if !async {
        if res->status() == .Tuples_Ok do res.valid = true;
    }

    if res.valid {
        res.col_names = make([] str, res->nfields(), allocator=context.temp_allocator);
        res.col_nums  = make([] i32, res->nfields(), allocator=context.temp_allocator);
        for i in res.col_names.count {
            res.col_names[i] = res->fname(i);
            res.col_nums[i]  = res->ftablecol(i);
        }

        res.rows = res->ntuples();
    }

    return res;
}

#inject
Result.status :: (res: &Result) => PQresultStatus(res.handle);

#inject
Result.ntuples :: (res: &Result) => PQntuples(res.handle);

#inject
Result.nfields :: (res: &Result) => PQnfields(res.handle);

#inject
Result.binary_tuples :: (res: &Result) => PQbinaryTuples(res.handle);

#inject
Result.fname :: (res: &Result, field_num: i32) =>
    PQfname(res.handle, field_num) |> cptru8_to_str(context.temp_allocator);

#inject
Result.fnumber :: (res: &Result, field_name: str) =>
    PQfnumber(res.handle, str_to_cstr(field_name));

#inject
Result.ftablecol :: (res: &Result, field_num: i32) =>
    PQftablecol(res.handle, field_num);

#inject // @Optimize
Result.get_value :: (res: &Result, tuple_num, field_num: i32) =>
    PQgetvalue(res.handle, tuple_num, field_num)
    |> cptru8_to_str(context.temp_allocator);

#inject
Result.get_value_into :: (res: &Result, tuple_num, field_num: i32, buffer: [] u8) => {
    return PQgetvalue(res.handle, tuple_num, field_num)
           |> cptru8_to_str(buffer);
}

#inject
Result.get_length :: (res: &Result, tuple_num, field_num: i32) =>
    PQgetlength(res.handle, tuple_num, field_num) + 1;

#inject
Result.get_is_null :: (res: &Result, tuple_num, field_num: i32) =>
    PQgetisnull(res.handle, tuple_num, field_num);

#inject
Result.nparams :: (res: &Result) => PQnparams(res.handle);

#inject
Result.paramtype :: (res: &Result, param_num: i32) =>
    PQparamtype(res.handle, param_num);

#inject
Result.clear :: (res: &Result) => PQclear(res.handle);

#inject
Result.error_message :: (res: &Result) =>
    PQresultErrorMessage(res.handle)
    |> cptru8_to_str(context.temp_allocator);

#inject
Result.one_as :: macro (res: &Result, $T: type_expr, string_allocator := context.allocator) -> T {
    result_to_struct :: result_to_struct

    t: T;
    result_to_struct(res, 0, T, ~~ &t, string_allocator);
    return t;
}

#inject
Result.all_as :: macro (res: &Result, $T: type_expr, string_allocator := context.allocator) -> [] T {
    result_to_struct :: result_to_struct
    use runtime

    ret := make([] T, res.rows);

    info := runtime.info.get_type_info(T);
    if info.kind != .Struct do return .[];

    for row in res.rows {
        base := cast([&] u8) (&ret[row]);
        result_to_struct(res, row, T, base, string_allocator);
    }

    return ret;
}


MapColumn :: struct {
    name: str;
}

result_to_struct :: (res: &Result, row: u32, type: type_expr, data: [&] u8, string_allocator := context.allocator) {
    if row >= res.rows do return;

    for col in res->nfields() {
        member := runtime.info.get_struct_member(type, res.col_names[col]);
        if !member {
            if type->info().kind != .Struct do continue;

            // Should cache this operation...
            for &m in type->info()->as_struct().members {
                slice.find_opt(m.tags, [t](t.type == MapColumn))->with([tag] {
                    mc := core.misc.any_as(tag, MapColumn);
                    if mc.name == res.col_names[col] {
                        member = m;
                        break break;
                    }
                });
            }

            if !member do continue;
        }

        if res->get_is_null(row, col) {
            // 0-bytes represent empty, falsey value
            core.memory.set(data + member.offset, 0, runtime.info.size_of(member.type));
            continue;
        }

        if member.type == str {
            *cast(&str) (data + member.offset) = PQgetvalue(res.handle, row, col)
                                                 |> cptru8_to_str(string_allocator);
        } else {
            conv.parse_any(data + member.offset, member.type,
                res->get_value(row, col), string_allocator=string_allocator);
        }
    }
}
