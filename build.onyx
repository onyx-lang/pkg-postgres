#load "./module"

use core {package, *}
use cbindgen {*}
use postgres

main :: () {
    path := module_path(#file);

    c_file_path := str.concat(path, "postgres.c");

    result := generate_c_binding(.{
        output_file = c_file_path,
        foreign_block = postgres.foreign_block,

        cast_map = .[
            .{ cptr(void), "void *" }
        ],

        preamble = .[ "#include <libpq-fe.h>" ],
    });

    if !result {
        os.exit(1);
    }

    run_pg_config :: (option: str) -> str {
        pg_config_proc := os.process_spawn("pg_config", .[option])
        defer os.process_destroy(&pg_config_proc)

        pg_config_reader := io.reader_make(&pg_config_proc)
        pg_value := pg_config_reader->read_all()
            |> str.strip_whitespace()

        return pg_value
    }

    include_dir := run_pg_config("--includedir")
    lib_dir     := run_pg_config("--libdir")

    result = compile_c_file(c_file_path, str.concat(path, "onyx_postgres"),
        includes  = .[include_dir],
        libraries = .["pq"],
        flags     = tprintf("-L{} -Wno-int-conversion", lib_dir));
    if !result {
        os.exit(1);
    }

    os.remove_file(c_file_path);
}
